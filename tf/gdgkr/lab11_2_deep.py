# -*- coding: utf-8 -*-
"""lab11-2_deep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J_sFTBx4jqSfkefhBLFxUZjET-fHjI8g

## Deep CNN for MNIST
"""

!pip3 install -U -q PyDrive

# see https://stackoverflow.com/questions/48596521/how-to-read-data-from-google-drive-using-colaboratory-google
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

def set_MNIST_file(filename):
  # 1. Authenticate and create the PyDrive client.
  auth.authenticate_user()
  gauth = GoogleAuth()
  gauth.credentials = GoogleCredentials.get_application_default()
  drive = GoogleDrive(gauth)

  # PyDrive reference:
  # https://googledrive.github.io/PyDrive/docs/build/html/index.html

  # Auto-iterate through all files that matches this query
  _root = drive.ListFile({'q': "'root' in parents and trashed=false"})
  _found = 0
  for _f1 in _root.GetList():
    if _f1['title'] == 'TF':
      print('title: %s, id: %s' % (_f1['title'], _f1['id']))
      _d1 = drive.ListFile({'q': "'%s' in parents" % (_f1['id'])})
      for _f2 in _d1.GetList():
        if _f2['title'] == "MNIST_data":
          print('title: %s, id: %s' % (_f2['title'], _f2['id']))
          _d2 = drive.ListFile({'q': "'%s' in parents" % (_f2['id'])})
          for _f3 in _d2.GetList():
            if _f3['title'] == filename:
              print('title: %s, id: %s' % (_f3['title'], _f3['id']))
              _found = 1
              _f = _f3

  if _found == 0:
    return -1;
  # 3. Load a file by ID and print its contents.
  downloaded = drive.CreateFile({'id': _f['id']})
  downloaded.GetContentFile(filename)
  return 0;

set_MNIST_file("t10k-images-idx3-ubyte.gz")
set_MNIST_file("train-images-idx3-ubyte.gz")
set_MNIST_file("t10k-labels-idx1-ubyte.gz")
set_MNIST_file("train-labels-idx1-ubyte.gz")

# tensorboard on colab
# https://stackoverflow.com/questions/47818822/can-i-use-tensorboard-with-google-colab
# https://stackoverflow.com/questions/48350226/methods-for-using-git-with-google-colab

# GPU on colab
# Simply select "GPU" in the Accelerator drop-down in Notebook Settings
#  (either through the Edit menu or the command palette at cmd/ctrl-shift-P).
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

tf.reset_default_graph()
tf.set_random_seed(777)  # reproducibility
# See https://www.tensorflow.org/tutorials/using_gpu#allowing_gpu_memory_growth
config = tf.ConfigProto()
config.gpu_options.allow_growth = True

"""# load MNIST_data/"""

import numpy as np
import random
import matplotlib.pyplot as plt
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

# hyper parameters
training_epochs = 15
batch_size = 100
learning_rate = 0.001

# dropout (keep_prob) rate  0.7~0.5 on training, but should be 1 for testing
keep_prob = tf.placeholder(tf.float32)

X = tf.placeholder(tf.float32, [None, 784], name='x-input')
X_img = tf.reshape(X, [-1, 28, 28, 1])   # img 28x28x1 (black/white)
Y = tf.placeholder(tf.float32, [None, 10], name='y-input')

"""# Conv layer 1"""

# L1 ImgIn shape=(?, 28, 28, 1)
W1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01)) # 3x3x1, # of filter = 32
#    Conv     -> (?, 28, 28, 32)
#    Pool     -> (?, 14, 14, 32)
L1 = tf.nn.conv2d(X_img, W1, strides=[1,1,1,1], padding='SAME')
L1 = tf.nn.relu(L1)
L1 = tf.nn.max_pool(L1, ksize=[1, 2, 2, 1],
                   strides=[1, 2, 2, 1], padding='SAME')
L1 = tf.nn.dropout(L1, keep_prob=keep_prob)
print(X_img)
print(L1)

"""# Conv Layer 2"""

# L2 ImgIn shape=(?, 14, 14, 32)
W2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev=0.01)) # 3x3x32, # of filter = 64
#    Conv     -> (?, 14, 14, 64)
#    Pool     -> (?, 7, 7, 64)
L2 = tf.nn.conv2d(L1, W2, strides=[1,1,1,1], padding='SAME')
L2 = tf.nn.relu(L2)
L2 = tf.nn.max_pool(L2, ksize=[1, 2, 2, 1],
                   strides=[1, 2, 2, 1], padding='SAME')
L2 = tf.nn.dropout(L2, keep_prob=keep_prob)
print(L2)

"""# Conv layer 3"""

# L3 ImgIn shape=(?, 7, 7, 64)
W3 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev=0.01))
#    Conv     -> (?, 7, 7, 128)
#    Pool     -> (?, 4, 4, 128)
L3 = tf.nn.conv2d(L2, W3, strides=[1,1,1,1], padding='SAME')
L3 = tf.nn.relu(L3)
L3 = tf.nn.max_pool(L3, ksize=[1, 2, 2, 1],
                   strides=[1, 2, 2, 1], padding='SAME')
L3 = tf.nn.dropout(L3, keep_prob=keep_prob)
print(L3)
L3_flat = tf.reshape(L3, [-1, 4 * 4 * 128])
print(L3_flat)

"""FC layer1"""

# FC 7x7x128 inputs -> 625 outputs
W4 = tf.get_variable("W4", shape=[4 * 4 * 128, 625],
                     initializer=tf.contrib.layers.xavier_initializer())
b4 = tf.Variable(tf.random_normal([625]))
L4 = tf.nn.relu(tf.matmul(L3_flat, W4) + b4)
L4 = tf.nn.dropout(L4, keep_prob=keep_prob)
print(L4)

"""# fully connected (FC, Dense) layer2"""

# Final FC 625 inputs -> 10 outputs
W5 = tf.get_variable("W5", shape=[625, 10],
                     initializer=tf.contrib.layers.xavier_initializer())
b5 = tf.Variable(tf.random_normal([10]))
hypothesis = tf.matmul(L4, W5) + b5

# define cost/loss & optimizer
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=hypothesis, labels=Y))
optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)
print(hypothesis)

"""# trainning..."""

sess = tf.Session(config=config)

# Initialize TensorFlow variables
sess.run(tf.global_variables_initializer())

# Training cycle
for epoch in range(training_epochs):
  avg_cost = 0
  total_batch = int(mnist.train.num_examples / batch_size)

  for i in range(total_batch):
    batch_xs, batch_ys = mnist.train.next_batch(batch_size)
    c, _ = sess.run([cost, optimizer],
                    feed_dict={X: batch_xs, Y: batch_ys, keep_prob: 0.7})
    avg_cost += c / total_batch

  print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))

print("Learning finished")

"""# accuracy"""

# Test model
is_correct = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(Y, 1))
# Calculate accuracy
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))
   
# Test the model using test sets
batch_size = 50
batch_num = int(mnist.test.num_examples / batch_size)
test_accuracy = 0
for i in range(batch_num):
  batch_xs, batch_ys = mnist.test.next_batch(batch_size)
  test_accuracy += sess.run(accuracy, feed_dict={
      X: batch_xs, Y: batch_ys, keep_prob: 1.0})
test_accuracy /= batch_num
print("Accuracy: ", test_accuracy)

"""# test"""

# Get one and predict
r = random.randint(0, mnist.test.num_examples - 1)
print("Label: ", sess.run(tf.argmax(mnist.test.labels[r:r + 1], 1)))
print("Prediction: ", sess.run(tf.argmax(hypothesis, 1),
    feed_dict={X: mnist.test.images[r:r + 1], keep_prob: 1.0}))

plt.imshow(
    mnist.test.images[r:r + 1].reshape(28, 28),
    cmap='Greys',
    interpolation='nearest')
plt.show()