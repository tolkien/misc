head(sel_3_arrd)
sel_3_arr = arrange(sel_3, c(sex, job))
sel_3_arr = arrange(sel_3, sex, job)
head(sel_3_arr)
sel_3_arrd = arrange(sel_3, desc(sex, job))
head(sel_3_arrd)
sel_3_g = group_by(sel_3, sex, job)
sel_3_g_m = summarise(sel_3_g, salmean = mean(salary), na.rm=TRUE)
sel_3_g_m
sel_3_g2 = group_by(sel_3, sex)
sel_3_g2_m = summarise(sel_3_g, salmean = mean(salary), na.rm=TRUE)
sel_3_g2_m
ins_job = arrange(insurance, job)
ins_job
ins_job_g = group_by(insurance, job)
ins_job_g
ins_job_g = group_by(ins, job)
ins_job_g = group_by(ins_job, job)
ins_job_g = group_by(ins, job)
ins_job_g = group_by(ins_job, job)
ins_job_g
ins_job_gm = summarize(ins_job_g, amMean=mean(amount), aSal=mean(salary))
ins_job_gm
ins_job_gm = summarize(ins_job_g, amMean=mean(amount), aSal=mean(salary), na.rm=T)
ins_job_gm
ins_job_gm = summarize(ins_job_g, amMean=mean(amount), aSal=mean(salary), na.rm=F)
ins_job_gm
ins_job_g
(7+4.5+17+22+7+6)/6
(110+113+200+88+138)/5
(135+127+95+110+105+110+85)/7
q()
getwd()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
librry(dplyr)
library(dplyr)
library(hflights)
flights = tbk_df(hflights)
flights = tbl_df(hflights)
flights
a1 = select(flights, UniqueCarrier, DepDelay)
a2 = filter(a1, DepDelay > 60)
head(a2)
flights %>%
  select(UniqueCarrier, DepDelay)
flights %>%
  select(UniqueCarrier, DepDelay) %>%
     filter(DepDelay > 60)
na2 = flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
head(na2)
q()
math = c(66,64,48,78,60,90,50,66,70)
physics = c(70,68,46,84,64,92,52,72)
corr(math, physics)
cor(math, physics)
physics = c(70,68,46,84,64,92,52,68,72)
cor(math, physics)
plot(math, physics, pch=16, col="BLUE")
plot(math, physics, pch=16, col="BLUE", main="수학물리 산점도")
plot(math, physics, pch=16, col="BLUE", main="(수학,물리) 산점도")
abline(lm(physics~math))
q()
avsl = c(5,4,7,6,8,10,11,0,7,10)
aval = c(5,4,7,6,8,10,11,0,7,10)
aval = c(5,4,7,6,8,10,11,0,7,18)
sum(aval)
mean(aval)
bval = c(5,4,7,6,8,10,11,0,7,18,100)
mean(bval)
sum(bval)
bval = c(22,5,21,16,18,20,23,24,32,490,36)
median(bval)
q()
aval = c(5,4,7,6,8,10,11, 0,7,18,100)
median(aval)
aval = c(5,4,7,6,8,10,11, 0,7,18)
median(aval)
aval = c(5,4,7,6,8,10,11, 0,7,14)
mean(aval)
median(aval)
aval = c(5,4,7,6,8,10,11, 0,9,14)
mean(aval)
median(aval)
aval = c(5,4,7,6,8,10,11, 0,9,14,100)
mean(aval)
median(aval)
q()
ntoss = sample(c(0,1), 1000, replace=T, prob=c(0.5, 0.5))
sum(ntoss)
ntoss = sample(c(0,1), 1000, replace=T, prob=c(0.5, 0.5))
sum(ntoss)
lotto <- function(nn = 10000) { # lotto.r
  luckyNo <- c(1,2,3,4,5,6)   # 당첨번호
  threeNo <- 0               # 번호 세 개의 맞는 회수
  for (i in 1: nn) {            # nn 번 모의실험
     x <- sort(sample.int(45, size=6))  # 1에서 45사이의 난수 6개 생성하여 오름차순
     nMatch = 0
     for (j in 1:6) { # 임의의 x 값에 대해
       for(k in j:6) { # 당첨번호 LuckNo와 같은지 비교
         if (x[j] == luckyNo[k]) nMatch = nMatch +1 # 각 번호를 당첨번호와 비교
     }} # end for j & k
     if (nMatch == 3) threeNo = threeNo + 1 # 세 개의 번호가 일치한 횟수
  } # end for i
list(threeNo = threeNo)
}  # end function
lotto(10000)
1/16
qnorm(0.025)
qt(0.025, Inf)
q()
0.1476/2
0.3337/2
x <- c(21.6,20.8,17.6,20.1,20.1,21.9,20.6,19.4,21.5,26.1) 
y <- c(20.6,20.4,20.2,20.2,18.0,19.8,20.9,19.7,20.3,19.7,22.7)
mx <- mean(x) ; my <- mean(y)
sdx <- sd(x) ; sdy <- sd(y)
sp <- sqrt( (9*sdx^2+10*sdy^2)/(10+11-2) )
t0 <- (mx-my)/(sp*sqrt(1/10+1/11))
t0
lbd <- (mx-my) - qt(0.975, 19)*sp*sqrt(1/10+1/11)
ubd <- (mx-my) + qt(0.975, 19)*sp*sqrt(1/10+1/11)
lbd
ubd
1-pt(t0, 19)
0.337/2
0.3337/2
t0 <- (mx-my)/sqrt(sdx^2/10+sdy^2/11)
t0
sw.df <- (sdx^2/10+sdy^2/11)^2/((sdx^2/10)^2/9 + (sdy^2/11)^2/10)
1-pt(t0, sw.df)
lbd <- (mx-my) - qt(0.975, sw.df)*sqrt(sdx^2/10+sdy^2/11)
lbd
ubd <- (mx-my) + qt(0.975, sw.df)*sqrt(sdx^2/10+sdy^2/11)
ubd
q()
load(file=file.choose())
wd
nwd
nwd=wd
nwd
wd
wd
nwd=wd
nwd[nwd$x2 < 0.11, "x2"] = 99
nwd[nwd == 99] = NA
head(nwd)
nwd[nwd < 0.11] = 99
head(nwd)
nwd=wd
nwd[nwd < 0.11] = 99
nwd=wd
nwd[nwd$x2 < 0.11, "x2"] = 99
head(nwd, n=2)
nwd[nwd == 99] = NA
head(nwd, n=2)
nwd[nwd > 0.9] = 99
nwd[nwd == 99] = NA
head(nwd, n=5)
rowSums(is.na(nwd))
colSums(is.na(nwd))
mywd = na.omit(nwd)
head(mywd)
q()
utils:::menuInstallPkgs()
library(gWidgets)
options("guiToolkit"="RGtk2")
win.1 <- gwindow("Sample checkbox")
utils:::menuInstallPkgs()
library(gWidgetsRGtk2)
library(gWidgetsRGtk2)
win.1 <- gwindow("Sample checkbox")
tmp<-gframe("Favorate color",cont=win.1)
checkbox.1<-gcheckbox("White",cont=tmp)
checkbox.2<-gcheckbox("Black",cont=tmp)
checkbox.3<-gcheckbox("Red",cont=tmp)
checkbox.4<-gcheckbox("Green",cont=tmp)
checkbox.5<-gcheckbox("Blue",cont=tmp)
checkbox.6<-gcheckbox("Pink",cont=tmp)
checkbox.7<-gcheckbox("Yellow",cont=tmp)
checkbox.1
svalue(checkbox.1)
svalue(checkbox.2)
svalue(checkbox.3)
svalue(checkbox.4)
svalue(checkbox.5)
svalue(checkbox.6)
svalue(checkbox.7)
win.2 <- gwindow("Sample text input console")
tmp<-gframe("Enter text",cont=win.2)
edit.sample<-gedit("",cont=tmp)
svalue(edit.sample)
simpleXYplotGui<- function(sam.data) {
  availVars <- colnames(sam.data)
  updatePlot <- function(h,...) {
    x<-sam.data[,svalue(Xvar)]
    y<-sam.data[,svalue(Yvar)]
    plot(x,y,pch=16,col=svalue(colchoose))
    if(svalue(linechoose)=="lm")
    {  abline(lm(y~x),lwd=2)
    } else 
    {  lines(lowess(x,y,f=svalue(spanAdjust)),lwd=2)
    }
  }
  ##The widgets
  win <- gwindow("Scatter plot with lines")
  gp <- ggroup(horizontal=FALSE, cont=win)
  tmp <- gframe("X variable", container=gp, expand=TRUE)
  Xvar <- gcombobox(availVars, cont=tmp,
                    handler=updatePlot)
  tmp <- gframe("Y variable", container=gp, expand=TRUE)
  Yvar <- gcombobox(availVars, cont=tmp,
                    handler=updatePlot)
  tmp <- gframe("Color of points", container=gp, expand=TRUE)
  colchoose <- gradio(c("black","red","blue","green"), cont=tmp,
                      handler =updatePlot)
  tmp <- gframe("lines", container=gp, expand=TRUE)
  linechoose <- gradio(c("lm","lowess"), cont=tmp,
                       handler =updatePlot)
  tmp <- gframe("lowess span", container=gp, expand=TRUE)
  spanAdjust <- gslider(from=0,to=1,by=.01, value=0.5,
                        cont=tmp, expand=TRUE, handler =updatePlot)
  add(win, ggraphics())
}
simpleXYplotGui(autompg)
utils:::menuInstallPkgs()
librry(xlsx)
library(xlsx)
autompg = readl.xlsx("c:/data/advancedR/auto-mpg.xlsx",1)
autompg = read.xlsx("c:/data/advancedR/auto-mpg.xlsx",1)
autompg = read.table("c:/data/advancedR/auto-mpg.data", header=TRUE)
autompg = read.xlsx("c:/data/advancedR/auto-mpg2.xlsx",1)
head(autompg)
simpleXYplotGui(autompg)
simpleXYplotGui(autompg)
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(gWidgetsRGtk2)
library(gWidgets)
confirmDialog <- function(message, handler=NULL) {
 window <- gwindow("Confirm")
 group <- ggroup(container = window)
 gimage("info", dirname="stock", size="dialog", container=group)
 ## A group for the message and buttons
 inner.group <- ggroup(horizontal=FALSE, container = group)
 glabel(message, container=inner.group, expand=TRUE)
 ## A group to organize the buttons
 button.group <- ggroup(container = inner.group)
 ## Push buttons to right
 addSpring(button.group)
 gbutton("ok", handler=handler, container=button.group)
 gbutton("cancel", handler = function(h,...) dispose(window),
 container=button.group)
 return()
}
confirmDialog("This space for rent", handler = function(h,...) {
 print("what to do... [Change accordingly]")
 ## In this instance dispose finds its parent window and closes it
 dispose(h$obj)
})
q()
>oneway.test
?oneway.yest
?oneway.test
q()
utils:::menuInstallPkgs()
library(vcd)
data(Arthritis)
names(Arthritis)
str(Arthritis)
head(Arthritis,5)
GSS = data.frame(
expand.grid(sex=c("female", "male"),
            party=c("dem", "indep", "rep"),
            count=c(279, 165, 73,47,225,191))
)
GSS
GSS = data.frame(
expand.grid(sex=c("female", "male"),
            party=c("dem", "indep", "rep")),
            count=c(279, 165, 73,47,225,191))
GSS
str(GSS)
                                                               q()
utils:::menuInstallPkgs()
library(multilevel)
data()
data(cohesion)
head(cohesion)
cohesion
group.size = data.frame(UNIT=c("1044B", "1044B", "1044C", "1044C",
PLATOON=c("1ST" , "2ND", "1ST", "2ND", PSIZE=c(3,3,2,3))
)
""")
group.size = data.frame(UNIT=c("1044B", "1044B", "1044C", "1044C",
PLATOON=c("1ST" , "2ND", "1ST", "2ND"), PSIZE=c(3,3,2,3))
)
group.size
group.size = data.frame(UNIT=c("1044B", "1044B", "1044C", "1044C"),
PLATOON=c("1ST" , "2ND", "1ST", "2ND"), PSIZE=c(3,3,2,3))
group.size
new.cohesion = merge(cohesion, group.size, by=c("UNIT", "PLATOON"))
new.cohesion
q()
utils:::menuInstallPkgs()
library(ggplot2)
?qplot
tipping = read.csv("c:/data/advancedR/tips.csv", header=T)
tipping$tiprate = tipping$tip/titpping$totbill * 100
tipping$tiprate = tipping$tip/tipping$totbill * 100
dim(tipping)
plot.theme + geom_point(color=“blue”) + 
       ggtitle(“전체 금액과 팁”)+ theme_bw()
       theme(panel.grid.major=element_blank(),
             panel.grid.minor=element_blank(),
             panel.border=element_blank(),
             axis.line = element_line())
library(ggplot2)
plot.basic<-ggplot(tipping,
          aes(x=totbill,y=tip,color=sex,shape=sex,size=tiprate))
x = c(1:10)
y = x+20
plot(x,y)
plot.basic + layer(geom="point")
plot.theme <- ggplot(tipping, aes(x = totbill, y = tip))
plot.theme + geom_point(color="blue") + xlab("Total Bill") + 
              ylab("팁") + ggtitle("전체 금액과 팁")
plot.theme + geom_point(color="blue") + 
       labs(xlab="Total Bill",ylab="팁",title="전체 금액과 팁")+
       theme(plot. title = element_text(size = 10, 
                                  color = "blue", face = "bold", hjust = 0))
plot.theme + geom_point(color="blue") + 
labs(xlab="Total Bill",ylab="팁",title="전체 금액과 팁")+
theme(plot. title = element_text(size = 10, 
plot.theme + geom_point(color="blue") + 
labs(xlab="Total Bill",ylab="팁",title="전체 금액과 팁")+
theme(plot. title = element_text(size = 10,color="blue", face = "bold", hjust = 0))
plot.theme + geom_point(color="blue") + 
labs(xlab="Total Bill",ylab="팁",title="전체 금액과 팁")+
theme(plot, title = element_text(size = 10,color="blue", face = "bold", hjust = 0))
plot.theme + geom_point(color="blue") + 
labs(xlab="Total Bill",ylab="팁",title="전체 금액과 팁")+
theme(plot.title = element_text(size = 10,color="blue", face = "bold", hjust = 0))
plot.theme + geom_point(color=“blue”) + 
       ggtitle(“전체 금액과 팁”)+ theme_bw()
       theme(panel.grid.major=element_blank(),
             panel.grid.minor=element_blank(),
             panel.border=element_blank(),
             axis.line = element_line())
plot.theme + geom_point(color=“blue”) + 
plot.theme + geom_point(color=“blue”) + 
plot(x,y)
plot.theme + geom_point(color=“blue”) + 
plot.theme + geom_point(color=“blue”)
plot.theme + geom_point(color=“blue”)_
plot.theme + geom_point(color=“blue”)  _
plot.theme + geom_point(color=“blue”) +
plot.theme + geom_point(color="blue") + 
ggtitle(“전체 금액과 팁”)+ theme_bw()
       theme(panel.grid.major=element_blank(),
             panel.grid.minor=element_blank(),
             panel.border=element_blank(),
             axis.line = element_line())
plot.theme + geom_point(color="blue") + 
ggtitle(“전체 금액과 팁”)+ theme_bw()
plot.theme + geom_point(color="blue") + 
ggtitle(“전체 금액과 팁”)+ theme_bw(,)
plot.theme + geom_point(color="blue") + 
ggtitle(“전체 금액과 팁”)+ theme_bw(),
lot.theme + geom_point(color=“blue”) + 
       ggtitle(“전체 금액과 팁”)+ theme_bw(),
       theme(panel.grid.major=element_blank(),
             panel.grid.minor=element_blank(),
             panel.border=element_blank(),
             axis.line = element_line())
q()
library(Rcmdr)
ㅂ()
q()
utils:::menuInstallPkgs()
library(Rcmdr)
library(Rcmdr)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(Rcmdr)
q()
library(Rcmdr)
2/40
q()
library(Rcmdr)
q()
library(Rcmdr)
ex9.data
pie(ex9.data$eduname)
pie(ex9.data$edu)
edu.tb = table(ex9.data$eduname)
edu.tb
pie(edu.tb)
q()
library(Rcmdr)
q()
711/2201
titan = red.table("c:/data/mva/titan.txt", header=T)
titan = read.table("c:/data/mva/titan.txt", header=T)
titan.data = titan[rep(1:nrow(titan), titan$Number),]
titan.data = titan.data[,-5]
head(titan.data)
utils:::menuInstallPkgs()
library(rpart)
cartfit = rpart(Survived ~ Class+Age+Sex, data=titan.data)
print(cartfit)
print(cartfit)
plot(cartfit, uniform=T, compress=T, margin=0.1)
text(cartfit, use.n=T, col="BLUE")
summary(titan.data)
summary(cartfit)
2092-109-470
2092+109-470
470*3
711*2
706*2
2092-109
1490+711
header(titan,3)
print(head)
print(titan)
isplay(titan.data)
display(titan.data)
list(titan.data)
list(titan.data,3)
list(titan.data,3)
summary(titan.data)
utils:::menuInstallPkgs()
library(xlsx)
mower.data = read.xlsx("c:/data/mva/mower.xlsx", 1)
mower.logit = glm(owner ~ . , family=binomial, data=mower.data)
summary(mower.logit)
mower = read.xls("c:/data/mva/mower.xlsx", 1)
?glm
summary(mower.data)
exp(0.3326)
exp(-0.3326)
1-pchisq(33.271,23)
1-pchisq(15.323, 21)
pchisq(15.323, 21)
1-0.194
mower.predict = predict(mower.logit, newdata=mower.data, type="response")
pred = ifelse(mower.predict < 0.5, "no", "yes")
pred = factor(pred)
confusion.matrix = table(moewr.data$owner, pred)
confusion.matrix = table(mower.data$owner, pred)
confusion.matrix
mower.predict
4/24
1/6
4/12
4/10
q()
?qt
?lapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# compute the list mean for each list element
lapply(x, mean)
x
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
?tapply
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
groups
tapply(groups, groups, length)
utils:::menuInstallPkgs()
library(ISwR)
data()
head(coking)
attach(coking)
list(time, width)
list(width,temp)
table(list(width, temp))
tapply(time, list(width, temp), mean)
q()
x = 2:10
y = 3*x + 5
y
x
y
a <- 3:9
b <- 3*x + 5
a
b
plot(a,b)
a
b <- 3*a + 5
plot(a,b)
plot(a,b, pch=18)
a
b
a <- 3:9
b <- 3*a + 5
plot(a,b, pch=18)
a
b
b
getwd()
getwd()
savehistory(file="mywork.Rhistory")
